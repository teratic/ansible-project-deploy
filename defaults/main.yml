---

# These variables must be set, they have no defaults:
# project_deploy_root: "path_to_project_on_the_target_machine"
# project_deploy_strategy: "git" or "synchronize"

# If you use the "git" strategy:
# - you must set a repository (no default)
# project_deploy_git_repo: "git_repository"
# - you can set the git ref to deploy (can be a branch, tag or commit hash)
project_deploy_version: "master"

# Number of old versions to keep
project_deploy_keep_releases: 5

# If you use the "rsync" strategy:
# - you can set a timeout for the synchonize module
project_deploy_synchronize_timeout: 30
# - you can also delete files that don't exist on source after synchronizing
project_deploy_synchronize_delete: false

# - you must set the path to your local source (the default assumes your playbook is located in /ansible/ )
project_deploy_local_path: "../"

# If you use the "s3" strategy:
# - region of your bucket
project_deploy_s3_region: 'eu-west-1'
# - your bucket
project_deploy_s3_bucket: 'my-bucket'
# - the path to the file to get
project_deploy_s3_path: '/my-app/'
# - file to get
project_deploy_s3_filename: my-app-master.war
# - final filename to write (usefull for tomcat/wars)
# project_deploy_final_filename: my-app.war

# The shared_path is used to set the path for your shared assets.
# Example:
# project_shared_path: "/var/shared"
project_deploy_shared_path: "{{ project_deploy_root }}/shared"

# The source_path is used to fetch the tags from git, or synchronise via rsync. This way
# you do not have to download/sync the entire project on every deploy
project_deploy_source_path: "{{ project_deploy_shared_path }}/source"

project_deploy_copy_folders: []

# Files or folders to remove from the source when deploying
project_deploy_unwanted_items: [ '.git' ]

# All the files to copy to the remote system on deploy. These could contain config files.
# Example:
# project_files:
#   - name: "some_file"           // <- optional, for your own reference and readability
#     src: "local-path-to-file"   // <- relative or absolute, just like Ansible
#     dest: "remote-path-to-file"
#   - name: "some_other_file"
#     src: "local-path-to-other-file"
#     dest: "remote-path-to-other-file"
project_deploy_files: []

# All the templates to copy to the remote system on deploy. These could contain config files.
# Works the same as the project_files
project_deploy_templates: []

# The shared_children is a list of all files/folders in your project that need to be linked to a path in "{{ project_shared_path }}.
# For example a sessions directory or an uploads folder.. They are created if they don't exist, with the type
# specified in the "type" key (file or directory).
# Example:
# project_shared_children:
#   - path: "/app/sessions"
#     src: "sessions"
#     type: "file" / "directory"  // <- optional, defaults to "directory"
#   - path: "/web/uploads"
#     src: "uploads"
project_deploy_shared_children: []

# The project_environment is a list of environment variables added to the various *_commands
# Example:
# project_environment:
#   SYMFONY_ENV: "prod"
project_deploy_environment: {}

# HOOKS
# At certain key points in the role an option exists to include a task file of your own:
# project_deploy_hook_on_initialize
# project_deploy_hook_on_update_source
# project_deploy_hook_on_create_build_dir
# project_deploy_hook_on_perform_build
# project_deploy_hook_on_make_shared_resources
# project_deploy_hook_on_finalize
#
# Example:
# project_deploy_hook_on_perform_build: "{{ playbook_dir }}/deploy_hooks/perform-build.yml"

# At the end of the role, the unfinished_filename is removed and the "current" symlink is set to
# the release. If you need to perform your own actions before this happens, set "project_finalize"
# to false, and when you're ready, perform these tasks yourself:
# - file: path={{ deploy.new_release_path }}/{{ deploy.unfinished_filename }} state=absent
# - file: src={{ deploy.new_release_path }} dest={{ deploy.current_path }} state=link
project_deploy_finalize: true
